{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n   \n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n   \n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n   \n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n   \n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    \n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    \n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n   \n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n  \n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n   \n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n   \n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    \n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n   \n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n   \n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    \n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n  \n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n   \n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/GiriToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n// Author: @kartik_giri\r\ncontract GiriToken  is ERC20 {\r\n      constructor(uint256 initialSupply) ERC20(\"GiriToken\", \"GIRI\") {\r\n    _mint(msg.sender, initialSupply);\r\n  }\r\n\r\n}\r\n// sepolia contract address :  0xfEefC998fc9846c04B5CC9811f42dAFB3D24a90c"
    },
    "contracts/ManualToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface tokenRecipient {\r\n  function receiveApproval(\r\n    address _from,\r\n    uint256 _value,\r\n    address _token,\r\n    bytes calldata _extraData\r\n  ) external;\r\n}\r\n\r\ncontract ManualToken {\r\n  // Public variables of the token\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals = 18; // 1 eth = 1e18 and the minimum amount of eth is 1 wei =>1000000000000000000 == 1 eth\r\n  // 18 decimals is the strongly suggested default, avoid changing it\r\n  uint256 public totalSupply;\r\n\r\n  // This creates an array with all balances\r\n  mapping(address => uint256) public balanceOf;\r\n  mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n  // This generates a public event on the blockchain that will notify clients\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  // This generates a public event on the blockchain that will notify clients\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _spender,\r\n    uint256 _value\r\n  );\r\n\r\n  // This notifies clients about the amount burnt\r\n  event Burn(address indexed from, uint256 value);\r\n\r\n  /**\r\n   * Constructor function\r\n   *\r\n   * Initializes contract with initial supply tokens to the creator of the contract\r\n   */\r\n  constructor(\r\n    uint256 initialSupply,\r\n    string memory tokenName,\r\n    string memory tokenSymbol\r\n  ) {\r\n    totalSupply = initialSupply * 10**uint256(decimals); // Update total supply with the decimal amount\r\n    balanceOf[msg.sender] = totalSupply; // Give the creator all initial tokens\r\n    name = tokenName; // Set the name for display purposes\r\n    symbol = tokenSymbol; // Set the symbol for display purposes\r\n  }\r\n\r\n  /**\r\n   * Internal transfer, only can be called by this contract\r\n   */\r\n  function _transfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  ) internal {\r\n    // Prevent transfer to 0x0 address. Use burn() instead\r\n    require(_to != address(0x0));\r\n    // Check if the sender has enough\r\n    require(balanceOf[_from] >= _value);\r\n    // Check for overflows\r\n    require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n    // Save this for an assertion in the future\r\n    uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\r\n    // Subtract from the sender\r\n    balanceOf[_from] -= _value;\r\n    // Add the same to the recipient\r\n    balanceOf[_to] += _value;\r\n    emit Transfer(_from, _to, _value);\r\n    // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n    assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n  }\r\n\r\n  /**\r\n   * Transfer tokens\r\n   *\r\n   * Send `_value` tokens to `_to` from your account\r\n   *\r\n   * @param _to The address of the recipient\r\n   * @param _value the amount to send\r\n   */\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {\r\n    _transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Transfer tokens from other address\r\n   *\r\n   * Send `_value` tokens to `_to` on behalf of `_from`\r\n   *\r\n   * @param _from The address of the sender\r\n   * @param _to The address of the recipient\r\n   * @param _value the amount to send\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  ) public returns (bool success) {\r\n    require(_value <= allowance[_from][msg.sender]); // Check allowance\r\n    allowance[_from][msg.sender] -= _value;\r\n    _transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Set allowance for other address\r\n   *\r\n   * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n   *\r\n   * @param _spender The address authorized to spend\r\n   * @param _value the max amount they can spend\r\n   */\r\n  function approve(address _spender, uint256 _value)\r\n    public\r\n    returns (bool success)\r\n  {\r\n    allowance[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Set allowance for other address and notify\r\n   *\r\n   * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n   *\r\n   * @param _spender The address authorized to spend\r\n   * @param _value the max amount they can spend\r\n   * @param _extraData some extra information to send to the approved contract\r\n   */\r\n  function approveAndCall(\r\n    address _spender,\r\n    uint256 _value,\r\n    bytes memory _extraData\r\n  ) public returns (bool success) {\r\n    tokenRecipient spender = tokenRecipient(_spender);\r\n    if (approve(_spender, _value)) {\r\n      spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy tokens\r\n   *\r\n   * Remove `_value` tokens from the system irreversibly\r\n   *\r\n   * @param _value the amount of money to burn\r\n   */\r\n  function burn(uint256 _value) public returns (bool success) {\r\n    require(balanceOf[msg.sender] >= _value); // Check if the sender has enough\r\n    balanceOf[msg.sender] -= _value; // Subtract from the sender\r\n    totalSupply -= _value; // Updates totalSupply\r\n    emit Burn(msg.sender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Destroy tokens from other account\r\n   *\r\n   * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n   *\r\n   * @param _from the address of the sender\r\n   * @param _value the amount of money to burn\r\n   */\r\n  function burnFrom(address _from, uint256 _value)\r\n    public\r\n    returns (bool success)\r\n  {\r\n    require(balanceOf[_from] >= _value); // Check if the targeted balance is enough\r\n    require(_value <= allowance[_from][msg.sender]); // Check allowance\r\n    balanceOf[_from] -= _value; // Subtract from the targeted balance\r\n    allowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance\r\n    totalSupply -= _value; // Update totalSupply\r\n    emit Burn(_from, _value);\r\n    return true;\r\n  }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}